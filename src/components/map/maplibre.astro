---
export interface Props {
  latitude: number
  longitude: number
  zoom: number
  container: string
  containerstyle?: string
  interactive?: boolean
  mapstyle?: object
  geocode?: boolean
  draw?: boolean
}

const {
  latitude,
  longitude,
  zoom,
  container,
  containerstyle,
  interactive = true,
  mapstyle = {
    id: 'OSM Raster',
    version: 8,
    name: 'OpenStreetMap',
    sources: {
      osm: {
        type: 'raster',
        tiles: [
          'https://a.tile.openstreetmap.org/{z}/{x}/{y}.png',
          'https://b.tile.openstreetmap.org/{z}/{x}/{y}.png',
          'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',
        ],
        minzoom: 0,
        maxzoom: 19,
        attribution: 'Â© <a target="_blank" rel="noopener" href="https://openstreetmap.org/copyright">OpenStreetMap contributors</a>',
      },
    },
    layers: [
      {
        id: 'osm',
        type: 'raster',
        source: 'osm',
        layout: {
          visibility: 'visible',
        },
      },
    ],
  },
  geocode,
  draw,
} = Astro.props;
---

<maplibre-astro
  data-latitude={latitude}
  data-longitude={longitude}
  data-zoom={zoom}
  data-container={container}
  data-containerstyle={containerstyle}
  data-interactive={interactive}
  data-mapstyle={JSON.stringify(mapstyle)}
  data-geocode={geocode}
  data-draw={draw}
>
  <div id={container} style={containerstyle}></div>
</maplibre-astro>

<script>
  import 'maplibre-gl/dist/maplibre-gl.css';
  import '@maplibre/maplibre-gl-geocoder/dist/maplibre-gl-geocoder.css';

  import type { MaplibreGeocoderApi } from '@maplibre/maplibre-gl-geocoder';
  import type { StyleSpecification, LngLatLike } from 'maplibre-gl';

  import maplibre from 'maplibre-gl';
  import MaplibreGeocoder from '@maplibre/maplibre-gl-geocoder';
  import { TerraDraw, TerraDrawMapLibreGLAdapter, TerraDrawPolygonMode } from "terra-draw";

  interface NominatimFeature {
    bbox: [number, number, number, number];
    properties: {
      display_name: string;
      [key: string]: any;
    };
  }

  class MapLibreMap extends HTMLElement {
    map: maplibre.Map | null = null;
    draw: TerraDraw | null = null;
    geocoder: MaplibreGeocoder | null = null;

    _initMap() {
      const mapConfig = {
        container: this.dataset.container || '',
        interactive: this.dataset.interactive === 'true',
        center: [
          parseFloat(this.dataset.longitude || '0'),
          parseFloat(this.dataset.latitude || '0')
        ] as LngLatLike,
        zoom: parseFloat(this.dataset.zoom || '0')
      };

      const mapStyle: StyleSpecification = JSON.parse(this.dataset.mapstyle || '{}');
      this.map = new maplibre.Map({ ...mapConfig, style: mapStyle });
    }

    _initDraw() {
      if (this.map) {
        this.draw = new TerraDraw({
          adapter: new TerraDrawMapLibreGLAdapter({ map: this.map }),
          modes: [new TerraDrawPolygonMode()],
        });
        this.draw.start();
        this.draw.setMode("polygon");
      }
    }

    _initGeocoder() {
      if (!this.map) return;

      const geocoderApi: MaplibreGeocoderApi = {
        forwardGeocode: async (config) => {
          try {
            const request = `https://nominatim.openstreetmap.org/search?q=${config.query}&format=geojson&polygon_geojson=1&addressdetails=1`;
            const response = await fetch(request);
            const geojson = await response.json();

            const features = geojson.features.map((feature: NominatimFeature) => {
              const center = [
                feature.bbox[0] + (feature.bbox[2] - feature.bbox[0]) / 2,
                feature.bbox[1] + (feature.bbox[3] - feature.bbox[1]) / 2,
              ];

              return {
                type: 'Feature',
                geometry: { type: 'Point', coordinates: center },
                place_name: feature.properties.display_name,
                properties: feature.properties,
                text: feature.properties.display_name,
                place_type: ['place'],
                center,
              };
            });

            return { type: 'FeatureCollection', features };
          } catch (e) {
            console.error(`Failed to forwardGeocode with error: ${e}`);
            return { type: 'FeatureCollection', features: [] };
          }
        },
        reverseGeocode: async () => ({ type: 'FeatureCollection', features: [] }),
      };

      const geocoderControl = new MaplibreGeocoder(geocoderApi, { maplibregl: maplibre });
      this.map.addControl(geocoderControl);
    }

    connectedCallback() {
      this._initMap();

      if (this.dataset.draw === 'true' && this.map) {
        this._initDraw();
      }

      if (this.dataset.geocode === 'true' && this.map) {
        this._initGeocoder();
      }
    }
  }

  window.customElements.define("maplibre-astro", MapLibreMap);
</script>
